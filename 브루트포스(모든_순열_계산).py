# -*- coding: utf-8 -*-
"""브루트포스(모든 순열 계산).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jk_411XBioqXrHkmTPrMvz83ZB9SzRdk
"""

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

# AES256 블록 암호화 함수
def encrypt_video(file_path, output_path, key):
    # 파일 읽기
    with open(file_path, 'rb') as f:
        video_data = f.read()

    # AES는 16바이트 블록 크기를 사용하므로 패딩 필요
    block_size = 16
    padding_length = block_size - (len(video_data) % block_size)
    video_data += bytes([padding_length] * padding_length)  # PKCS7 패딩

    # IV 생성 (16바이트)
    iv = os.urandom(16)

    # AES 암호화 초기화
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # 암호화 수행
    encrypted_data = encryptor.update(video_data) + encryptor.finalize()

    # 암호화된 데이터 저장 (IV + 암호화된 데이터)
    with open(output_path, 'wb') as f:
        f.write(iv + encrypted_data)

# AES256 복호화 함수
def decrypt_video(encrypted_path, output_path, key):
    with open(encrypted_path, 'rb') as f:
        encrypted_data = f.read()

    # IV와 암호화된 데이터 분리
    iv = encrypted_data[:16]
    encrypted_video_data = encrypted_data[16:]

    # AES 복호화 초기화
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # 복호화 수행
    decrypted_data = decryptor.update(encrypted_video_data) + decryptor.finalize()

    # PKCS7 패딩 제거
    padding_length = decrypted_data[-1]
    decrypted_data = decrypted_data[:-padding_length]

    # 복호화된 데이터 저장
    with open(output_path, 'wb') as f:
        f.write(decrypted_data)

# AES256 키 생성 (32바이트)
key = os.urandom(32)

# 영상 암호화
encrypt_video('input_video.mp4', 'encrypted_video.aes', key)

# 영상 복호화
decrypt_video('encrypted_video.aes', 'decrypted_video.mp4', key)