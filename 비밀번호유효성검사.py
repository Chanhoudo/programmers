# -*- coding: utf-8 -*-
"""비밀번호유효성검사.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQr5BtqgyUgRHAyWv5f7mu9zkw-8-xpL
"""

import re

def is_valid_password(password):
    errors = []

    # 비밀번호 길이 검사
    if not (9 <= len(password) <= 16):
        errors.append("비밀번호는 9~16자 사이여야 합니다.")

    # QWERTY 키보드 배열을 포함한 순차 문자열 정의
    qwerty_sequence = (
        "1234567890qwertyuiopasdfghjklzxcvbnm"
        "QWERTYUIOPASDFGHJKLZXCVBNM"
        "0987654321mnbvcxzlkjhgfdsaPoiuytrewq"
    )

    # 최소 연속 길이 설정
    min_sequence_length = 4

    # 비밀번호 순차성 검사
    for i in range(len(password) - min_sequence_length + 1):
        substring = password[i:i + min_sequence_length]
        if substring in qwerty_sequence or substring[::-1] in qwerty_sequence:
            errors.append("비밀번호는 연속된 4자 이상의 키보드 배열을 포함하면 안 됩니다.")
            break  # 순차성 오류는 한 번만 체크 후 종료

    # 문자 유형 검사
    types_count = 0
    if re.search(r"[A-Z]", password):  # 대문자 검사
        types_count += 1
    if re.search(r"[a-z]", password):  # 소문자 검사
        types_count += 1
    if re.search(r"[0-9]", password):  # 숫자 검사
        types_count += 1
    if re.search(r"[^a-zA-Z0-9]", password):  # 특수문자 검사
        types_count += 1

    if types_count < 3:
        errors.append("비밀번호는 특수문자, 숫자, 대문자, 소문자 중 최소 3가지를 포함해야 합니다.")

    # 동일한 문자 연속 검사
    if re.search(r"(.)\1{3,}", password):
        errors.append("비밀번호에 동일한 문자가 4회 이상 연속될 수 없습니다.")

    # 결과 반환
    if errors:
        print("비밀번호가 유효하지 않습니다:")
        for error in errors:
            print(f"- {error}")
        return False

    print("비밀번호가 유효합니다.")
    return True

# 테스트
password = input("비밀번호를 입력하세요: ")
is_valid_password(password)